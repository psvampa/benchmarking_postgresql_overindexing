BEGIN;

-- 1. Insert 10 new products
WITH new_products AS (
  INSERT INTO products(name, description, price)
  SELECT
    'Product pgbench',
    'Generated by pgbench',
    ROUND(100 + (random() * 900)::numeric, 2)
  FROM generate_series(1, 10)
  RETURNING id
),
-- 2. Select 10 random warehouses
random_warehouses AS (
  SELECT id FROM warehouses ORDER BY random() LIMIT 10
),
-- 3. Cross join new products and 10 warehouses to create stock entries
stock_data AS (
  SELECT
    np.id AS product_id,
    w.id AS warehouse_id,
    50 AS quantity,
    10 AS min_quantity,
    100 AS max_quantity,
    20 AS reorder_point,
    NOW() - (random() * INTERVAL '30 days') AS last_restock_date,
    TRUE AS is_active,
    'LOC-' || floor(random() * 100)::int AS location_code,
    'BATCH-' || floor(random() * 1000)::int AS batch_number,
    CURRENT_DATE + (random() * 365)::int AS expiration_date,
    NOW() AS last_updated
  FROM new_products np
  CROSS JOIN random_warehouses w
)
-- 4. Insert stock entries with ON CONFLICT DO NOTHING to ensure uniqueness
INSERT INTO stock (
    product_id,
    warehouse_id,
    quantity,
    min_quantity,
    max_quantity,
    reorder_point,
    last_restock_date,
    is_active,
    location_code,
    batch_number,
    expiration_date,
    last_updated
)
SELECT *
FROM stock_data
ON CONFLICT (product_id, warehouse_id) DO NOTHING;


-- 5. Insert 5 inbound stock movements and update stock accordingly
-- Choose 5 pseudo-random stock entries using TABLESAMPLE (fast, but approximate)
WITH selected_stock AS (
  SELECT product_id, warehouse_id
  FROM stock
  TABLESAMPLE SYSTEM (0.05) -- Adjust % based on table size
  LIMIT 10
),
movements AS (
  INSERT INTO stock_movements (
    product_id,
    warehouse_id,
    quantity,
    movement_type,
    movement_date,
    reason_code,
    reference_document,
    operator_name,
    approved_by,
    movement_status
  )
  SELECT
    ss.product_id,
    ss.warehouse_id,
    10, -- quantity moved
    'inbound',
    NOW(),
    'PG-BENCH',
    'REF-' || floor(random() * 10000)::int,
    'operator-pg',
    'supervisor-pg',
    'completed'
  FROM selected_stock ss
  RETURNING product_id, warehouse_id, quantity
)
-- Update the stock accordingly (increasing quantity)
UPDATE stock s
SET quantity = s.quantity + m.quantity,
    last_updated = NOW()
FROM movements m
WHERE s.product_id = m.product_id AND s.warehouse_id = m.warehouse_id;

COMMIT;
